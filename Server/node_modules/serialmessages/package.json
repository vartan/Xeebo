{
  "name": "serialmessages",
  "version": "0.0.3",
  "description": "Handles variable length messages over UART",
  "main": "serialmessages.js",
  "dependencies": {
    "q": "^1.2.0",
    "serialport": "^1.6.3"
  },
  "devDependencies": {},
  "scripts": {},
  "author": {
    "name": "vartan"
  },
  "license": "WTFPL",
  "readme": "- [MessageHandler](#messagehandler)\n    - [Installation](#installation)\n    - [Usage](#usage)\n        - [example.js](#examplejs)\n            - [output](#example-output)\n    - [Contributing](#contributing)\n    - [History](#history)\n    - [License](#license)\n\n# SerialMessages\nSerialMessages is a module that sits between node and a serial port in order to \nasynchronously and synchronously respond to messages over UART\n\n## Installation\nType the following into your commandline if you have `npm` installed\n\n    npm install serialmessages\n\n## Usage\nThis is how you instantiate up the serial message handler\n```javascript\nvar messageHandler = require(\"serialmessages\")(\"/dev/tty.usbserial-FTE6C8SO\");\nmessageHandler.serialPort.on(\"data\", function(){});\nvar Q = require(\"q\"); // (optional) for synchronous messages\n```\nTo create message handlers:\n```javascript\n// Add message with ID 0x61 (ASCII 'a'). \nvar testHandler = messageHandler.addHandler({\n  id:       0x61,\n  name:     \"'a' handler\", \n  length:   4, \n});\n\nvar testHandler2 = messageHandler.addHandler({\n  id:       0x62,\n  name:     \"'b' handler\", \n  length:   5, \n});\n```\n\nTo perform asynchronous handling:\n```javascript\ntestHandler1.on(\"message\", function(event) {\n    console.log(\"Received message 'a' asynchronously with payload \"+event.data);    \n});\ntestHandler2.on(\"message\", function(event) {\n    console.log(\"Received message 'b' asynchronously with payload \"+event.data);    \n});\n```\n\nTo perform synchronous handling:\n```javascript\nQ.when(messageHandler.open())\n.then(testHandler.receive())\n.then(function(event) {\n    console.log(\"Received handler a synchronously: \"+event.data);\n})\n.catch(function(error) {\n    console.log(\"ERROR! \"+error);\n})\n.finally(function() {\n    console.log(\"Done.\");\n});\n```\n\n### example.js\nHere is a larger example, with simultaneous asynchronous/synchronous handlers:\n```javascript\n#!/usr/bin/env node\n\"use strict\";\nvar Q = require(\"q\");\n\n// Open a new message handler\nvar serialIdentifier = process.argv[2] || \"/dev/tty.usbserial-A7027DGF\";\nvar messageHandler = require(\"serialmessages\")(serialIdentifier);\n\n// echo all received characters back to command line\nmessageHandler.serialPort.on(\"data\", echo(messageHandler.serialPort));\n\n// Add message with ID 0x61 (ASCII 'a'). \nvar testHandler = messageHandler.addHandler({\n  id:       ascii('a'),\n  name:     \"'a' handler\", \n  length:   4, \n}).on(\"message\", logMessageHandler).on(\"message\", sendNewLine);\n\n// Add message with ID 0x62 (ASCII 'b')\nvar testHandler2 = messageHandler.addHandler({\n  id:       ascii('b'), \n  name:     \"'b' handler\",\n  length:   5, \n}).on(\"message\", logMessageHandler).on(\"message\", sendNewLine);\n\n// Add message with ID 0x65 (ascii 'e')\nvar testHandler3 = messageHandler.addHandler({\n  id:       ascii('e'), \n  name:     \"exit handler\",\n  length:   3, \n}).on(\"message\", sendNewLine);\n\n// Add to message handler, if the payload is \"xit\", then send a newline, then\n// exit the program.\ntestHandler3.on(\"message\", function(event) {\n  if (event.data.toString() === \"xit\") {\n    Q.fcall(messageHandler.sendMessage(\"Exiting...\\r\\n\"))\n    .delay(10)\n    .then(process.exit);\n\n  }\n});\n\n\n\n\n//Example sequence of events:\n//1. ensure message handler is open\n//2. send \"test\" message\n//3. report how many characters were sent \n//4. receive 'a' message\n//5. console log a message back to user\n//6. receive 'b' message.\n//7. console log b message back to user\n//8. log \"finished\"\n\nQ.when(messageHandler.open())                                                //1\n  .then(messageHandler.sendMessage(\"test\\r\\n\"))                              //2\n  .then(function handleSentMessage(messageLength) {                          //3\n    console.log(\"sent message which was \"+messageLength+\" characters long.\");\n  })\n  .then(testHandler.receive())                                               //4\n  .then(function handleFirstMessage(event) {                                 //5\n    console.log(\"Finally received expected message 1: \"+event.data);               \n  })\n  .then(testHandler2.receive())                                              //6\n  .then(function handleSecondMessage(event) {                                //7\n    console.log(\"Finally received expected message 2: \"+event.data);            \n  })  \n  .finally(function logFinished() {                                          //8\n    console.log(\"Finished!\");\n  })\n  .catch(function(error){console.log(error);});\n\n\n/*************************** Misc. Functions Below ***************************/\n\n/**\n * Log received messages to command line, and notify user via bell.\n * @param  {Buffer} event Event received over serial\n */\nfunction logMessageHandler(event) {\n  console.log(\"(\" + event.messageHandler.name + \": \" + event.data + \")\\u0007\");\n}\n\n/**\n * Used to echo received data back over serial.\n * @param  {Buffer} serialPort SerialPort to echo to\n */\nfunction echo(serialPort) {\n  /**\n   * Echo to serial port\n   * @param  {Buffer} data Data to send over port\n   */\n  return function echoToPort(data) {\n    var i;\n    for (i = 0; i < data.length; i += 1) {\n      var char = data[i];\n      if (char === \"\\r\".charCodeAt(0)) {\n        serialPort.write(\"\\r\\n\", function(){});\n      } else if (char === 0x7f) {\n        serialPort.write(\"\\b \\b\", function(){});\n      } else {\n        serialPort.write(String.fromCharCode(char),function(){});\n      }\n    }\n  };\n}\n/**\n * Send New Line\n * Sends a line break over serial, for debugging purposes\n * @return {Promise} Promise to send new newline character\n */\nfunction sendNewLine() {\n  return Q.fcall(messageHandler.sendMessage(\"\\r\\n\")); \n}\n\nfunction ascii (char){\n  return char.charCodeAt(0);\n}\n\n```\n####Example Output\n![example.js output](https://raw.githubusercontent.com/vartan/serialmessages/master/example.js.png)\n## Contributing\n\n1. Fork it!\n2. Create your feature branch: `git checkout -b my-new-feature`\n3. Commit your changes: `git commit -am 'Add some feature'`\n4. Push to the branch: `git push origin my-new-feature`\n5. Submit a pull request :D\n\n## History\n\n    0.0.1 - Added\n\n## License\n[![WTFPL](http://www.wtfpl.net/wp-content/uploads/2012/12/wtfpl-badge-4.png)\n](http://www.wtfpl.net/) Licensed by WTFPL",
  "readmeFilename": "README.md",
  "gitHead": "9429888deb008b3514201a2d0ded625e64cb5d40",
  "_id": "serialmessages@0.0.3",
  "_shasum": "74b86700ab335e5d8d4d3f05951cd190656426ea",
  "_from": "serialmessages@*"
}
